package sockets;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONObject;

public class TestServer {

	public static void start() throws IOException {
		//ServerSocket serverSocket= new ServerSocket(6040);
		//serverSocket.getInetAddress();
		//System.out.println("Server started at: " + InetAddress.getLocalHost() + " on port: " + serverSocket.getLocalPort());
		ServerSocket server = null ;

		ArrayList<ClientWorker> clientWorkers = new ArrayList<ClientWorker>();
		int idCounter = 0;

		      try{
		        int port = 6040;
		        server = new ServerSocket();
		      } catch (IOException e) {
		        System.exit(-1);
		      }
		      while(true){
		        ClientWorker w;
		        try{
		        //server.accept returns a client connection
		          ClientWorker clientWorker = new ClientWorker(server.accept(), idCounter );
		          idCounter++;
		          clientWorkers.add(clientWorker); 
		          Thread t = new Thread(clientWorker);
		          t.start();
		        } catch (IOException e) {
		          System.exit(-1);
		        }
		      }
	}

	private static void startHandler(final Socket socket) {
		Thread handler= new Thread() {
			public boolean verified = false;
			public void run() {
				System.out.println("prvi put");
				
				int interval = 5000;
			    int delay = 500; // repeat every second.
			    Timer timer = new Timer();
			    

			    	timer.scheduleAtFixedRate(new TimerTask() {
				        public void run() {
				        	
				        	System.out.print(socket.isClosed());
				        	try {
				        		if(socket.isClosed()){
							    	timer.cancel();
							        timer.purge();
							    }
					        	else {
								BufferedReader reader= new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"));
								String jsonText= reader.readLine();
								JSONObject object= new JSONObject(jsonText);
								System.out.println(object.toString());
								if (object.getInt("password") == 3){
									verified = true;
								}
								System.out.println("Verified is " + verified);
								OutputStreamWriter writer= new OutputStreamWriter(socket.getOutputStream(), "UTF-8");
								Random randomGenerator = new Random();
								object.put("number", randomGenerator.nextInt(5));
								writer.write(object.toString() + "\n");
								writer.flush();
					        	}
							} catch (IOException ex) {
								timer.cancel();
						        timer.purge();
								ex.printStackTrace();
								closeSocket();
							} finally {
								//closeSocket();
							}
				        }
				    }, interval, delay);
			    	
			    
			    
			}

			private void closeSocket() {
				try {
					socket.close();
				} catch (IOException ex) {

				}
			}
		};
		handler.start();
		System.out.println("Thread ID: " + handler.getId() + " ,Thread Name: " + handler.getName());
	}
}
