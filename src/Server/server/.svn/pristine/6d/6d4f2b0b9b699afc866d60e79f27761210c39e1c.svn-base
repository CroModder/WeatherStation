package controller;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.effect.Effect;
import javafx.scene.effect.InnerShadow;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Polygon;
import javafx.scene.transform.Scale;
import javafx.scene.transform.Shear;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.net.URL;
import java.util.Random;
import java.util.ResourceBundle;

    public class GUI extends Application  implements Initializable{
		private Clock clock;
		
		@FXML
		private AnchorPane tempPane;
		@FXML
		private AnchorPane airPane;

	
	@Override
	public void start(Stage stage) throws Exception {
	    BorderPane page = (BorderPane) FXMLLoader.load(getClass().getResource("/view/Display.fxml"));
		stage.setTitle("Digital Clock - x86_g");
        Scene scene = new Scene(page);
        stage.setScene(scene);
        stage.show();
	}



	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		clock = new Clock(Color.RED, Color.rgb(255,255,255));
        clock.setLayoutX(240);
        clock.setLayoutY(10);
        clock.getTransforms().add(new Scale(0.83f, 0.83f, 0, 0));
        System.out.println("init " + tempPane);
        tempPane.getChildren().add(clock);
	}
	
	public static void main(String[] args) {
	    Application.launch(args);
	}
	
	  private static void log(String aMessage){
	    System.out.println(aMessage);
	  }
	  
	  public static int getNthDigit(int number, int base, int n) {    
		  return (int) ((number / Math.pow(base, n - 1)) % base);
	  }
  /***************************/
    public static class Clock extends Parent {
        private Digit[] digits;
        private Timeline delayTimeline, secondTimeline;


        public Clock(Color onColor, Color offColor) {
            InnerShadow offEffect = new InnerShadow();
            // create digits
            digits = new Digit[2];
            for (int i = 0; i < 2; i++) {
                Digit digit = new Digit(onColor, offColor, offEffect);
                digit.setLayoutX(i * 60 + 20);
                System.out.println(digit.getLayoutX());
                digits[i] = digit;
                getChildren().add(digit);
            }
            // update digits to current time and start timer to update every second
            refreshClocks(0,0);
            play();
        }


        private void refreshClocks(Integer prva, Integer druga) {
            digits[0].showNumber(prva);
            digits[1].showNumber(druga);
          /*digits[2].showNumber(6);
            digits[3].showNumber(6);
            digits[4].showNumber(5);
            digits[5].showNumber(6);*/
        }


        public void play() {
            // wait till start of next second then start a timeline to call refreshClocks() every second
            delayTimeline = new Timeline();
            delayTimeline.getKeyFrames().add(
                    new KeyFrame(new Duration(1000 - (System.currentTimeMillis() % 1000)), new EventHandler<ActionEvent>() {
                        @Override public void handle(ActionEvent event) {
                            if (secondTimeline != null) {
                                secondTimeline.stop();
                            }
                            secondTimeline = new Timeline();
                            secondTimeline.setCycleCount(Timeline.INDEFINITE);
                            secondTimeline.getKeyFrames().add(
                                    new KeyFrame(Duration.seconds(1), new EventHandler<ActionEvent>() {
                                        @Override public void handle(ActionEvent event) {
                                    		Integer[] result = new Integer[2];
                                    	    Random randomGenerator = new Random();
                                    	      int randomInt = randomGenerator.nextInt(100);
                                    	      log("Generated : " + randomInt);
                                    	     System.out.println("first " + getNthDigit(randomInt, 10, 2));
                                    	     System.out.println("second " + getNthDigit(randomInt, 10, 1));
                                    	     result[0] = getNthDigit(randomInt, 10, 2);
                                    	     result[1] = getNthDigit(randomInt, 10, 1);
                                            refreshClocks(result[0],result[1]);
                                        }
                                    }));
                            secondTimeline.play();
                        }
                    })
            );
            delayTimeline.play();
        }


        public void stop(){
            delayTimeline.stop();
            if (secondTimeline != null) {
                secondTimeline.stop();
            }
        }
    }

    public static final class Digit extends Parent {
        private static final boolean[][] DIGIT_COMBINATIONS = new boolean[][]{
                new boolean[]{true, false, true, true, true, true, true},
                new boolean[]{false, false, false, false, true, false, true},
                new boolean[]{true, true, true, false, true, true, false},
                new boolean[]{true, true, true, false, true, false, true},
                new boolean[]{false, true, false, true, true, false, true},
                new boolean[]{true, true, true, true, false, false, true},
                new boolean[]{true, true, true, true, false, true, true},
                new boolean[]{true, false, false, false, true, false, true},
                new boolean[]{true, true, true, true, true, true, true},
                new boolean[]{true, true, true, true, true, false, true}};
        private final Polygon[] polygons = new Polygon[]{
                new Polygon(2, 0, 52, 0, 42, 10, 12, 10),
                new Polygon(12, 49, 42, 49, 52, 54, 42, 59, 12f, 59f, 2f, 54f),
                new Polygon(12, 98, 42, 98, 52, 108, 2, 108),
                new Polygon(0, 2, 10, 12, 10, 47, 0, 52),
                new Polygon(44, 12, 54, 2, 54, 52, 44, 47),
                new Polygon(0, 56, 10, 61, 10, 96, 0, 106),
                new Polygon(44, 61, 54, 56, 54, 106, 44, 96)};
        private final Color onColor;
        private final Color offColor;


        public Digit(Color onColor, Color offColor,Effect offEffect) {
            this.onColor = onColor;
            this.offColor = offColor;
            getChildren().addAll(polygons);
            getTransforms().add(new Shear(-0.1,0));
            showNumber(0);
        }


		public void showNumber(Integer num) {
            if (num < 0 || num > 9) num = 0; // default to 0 for non-valid numbers
            for (int i = 0; i < 7; i++) {
                polygons[i].setFill(DIGIT_COMBINATIONS[num][i] ? onColor : offColor);
            }
        }
    }
	}