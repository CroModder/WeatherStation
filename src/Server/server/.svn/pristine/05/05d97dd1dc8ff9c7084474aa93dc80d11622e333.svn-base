package controller;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.effect.Effect;
import javafx.scene.effect.InnerShadow;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Polygon;
import javafx.scene.transform.Scale;
import javafx.scene.transform.Shear;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import java.net.URL;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;

public class GUI extends Application  implements Initializable{
	private SensorData sensorData;
	private static Timer segmentTimer = new Timer();
	
	@FXML
	private Pane tempPane;
	@FXML
	private Pane airPane;
	@FXML
	private Pane movePane;
	@FXML
	private Pane magPane;

	
	@Override
	public void start(Stage stage) throws Exception {
	    AnchorPane page = (AnchorPane) FXMLLoader.load(getClass().getResource("/view/Display.fxml"));
		stage.setTitle("Weather station");
        Scene scene = new Scene(page);
        stage.setScene(scene);
        stage.show();
        stage.setFullScreen(true);
        stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            public void handle(WindowEvent we) {
                segmentTimer.cancel();
                segmentTimer.purge();
            }
        });  
	}

	
	public static void main(String[] args) {
	    Application.launch(args);
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		sensorData = new SensorData(Color.RED, Color.rgb(236,223,223),0);
		sensorData.setLayoutX(60);
		sensorData.setLayoutY(105);
		sensorData.getTransforms().add(new Scale(0.53f, 0.53f, 0, 0));
        System.out.println("init " + tempPane);
        tempPane.getChildren().add(sensorData);
        sensorData = new SensorData(Color.RED, Color.rgb(236,223,223),1);
        sensorData.setLayoutX(60);
        sensorData.setLayoutY(105);
        sensorData.getTransforms().add(new Scale(0.53f, 0.53f, 0, 0));
        airPane.getChildren().add(sensorData);
        sensorData = new SensorData(Color.RED, Color.rgb(236,223,223),2);
        sensorData.setLayoutX(60);
        sensorData.setLayoutY(105);
        sensorData.getTransforms().add(new Scale(0.53f, 0.53f, 0, 0));
        movePane.getChildren().add(sensorData);
        /*clock = new Clock(Color.RED, Color.rgb(236,223,223),3);
        clock.setLayoutX(60);
        clock.setLayoutY(105);
        clock.getTransforms().add(new Scale(0.53f, 0.53f, 0, 0));
        magPane.getChildren().add(clock);*/
        
	}
	
	private static void log(String aMessage){
		System.out.println(aMessage);
	}
	  
	public static int getNthDigit(int number, int base, int n) {    
		return (int) ((number / Math.pow(base, n - 1)) % base);
	}
	
	public static class SensorData extends Parent {
		private static Digit[] digitsTemp;
		private static Digit[] digitsAir;
		private static Digit[] digitsMove;
		private static Digit[] digitsMag;

		public SensorData(Color onColor, Color offColor,Integer id) {
			InnerShadow offEffect = new InnerShadow();
			// create digits
			if(id == 0){
				digitsTemp = new Digit[3];
				for (int i = 0; i < 3; i++) {
					Digit digit = new Digit(onColor, offColor, offEffect);
					digit.setLayoutX(i * 60 + 20);
					System.out.println(digit.getLayoutX());
					digitsTemp[i] = digit;
					getChildren().add(digit);
				}
				refreshTemp(0,0,0);
			}else if(id == 1){
				digitsAir = new Digit[4];
				for (int i = 0; i < 4; i++) {
					Digit digit = new Digit(onColor, offColor, offEffect);
					digit.setLayoutX(i * 60 + 20);
					System.out.println(digit.getLayoutX());
					digitsAir[i] = digit;
					getChildren().add(digit);
				}
				refreshAir(0,0,0,0);
			}else if (id == 2){
            	digitsMove = new Digit[4];
                for (int i = 0; i < 4; i++) {
                    Digit digit = new Digit(onColor, offColor, offEffect);
                    digit.setLayoutX(i * 60 + 20);
                    System.out.println(digit.getLayoutX());
                    digitsMove[i] = digit;
                    getChildren().add(digit);
                }
                refreshMove(0,0,0,0);
            }/*else{
            	digitsMag = new Digit[12];
                for (int i = 0; i < 12; i++) {
                    Digit digit = new Digit(onColor, offColor, offEffect);
                    if(i >= 4 && i < 8){
                    	System.out.println(i+ "prvi if");
                    	digit.setLayoutX(i * 60 + 400);
                    }else if(i >= 8 && i < 12){
                    	System.out.println(i+ "drugi if");
                    	digit.setLayoutX(i * 60 + 800);
                    }else{
                    	System.out.println(i+ "treci if");
                    	digit.setLayoutX(i * 60 + 20);
                    }
                    System.out.println(digit.getLayoutX());
                    digitsMag[i] = digit;
                    getChildren().add(digit);
                }
                refreshClocks(0,0,0,3);
            }*/
			play();
		}
		
		private void refreshMove(int first, int second,int third,int fourth){
			digitsMove[0].showNumber(first);
			digitsMove[1].showNumber(second);
			digitsMove[2].showNumber(third);
			digitsMove[3].showNumber(fourth);
		}
		
		private void refreshAir(int first, int second,int third,int fourth) {
			digitsAir[0].showNumber(first);
			digitsAir[1].showNumber(second);
			digitsAir[2].showNumber(third);
			digitsAir[3].showNumber(fourth);
		}

		private void refreshTemp(int first, int second,int third) {
			digitsTemp[0].showNumber(first);
			digitsTemp[1].showNumber(second);
			digitsTemp[2].showNumber(third);
			/*}else{
        		digitsMag[0].showNumber(1);
        		digitsMag[1].showNumber(2);
        		digitsMag[2].showNumber(3);
        		digitsMag[3].showNumber(4);
        		digitsMag[4].showNumber(5);
        		digitsMag[5].showNumber(6);
        		digitsMag[6].showNumber(7);
        		digitsMag[7].showNumber(8);
        		digitsMag[8].showNumber(9);
        		digitsMag[9].showNumber(9);
        		digitsMag[10].showNumber(9);
        		digitsMag[11].showNumber(9);
        	}*/
		}


		public void play() {
			segmentTimer.scheduleAtFixedRate(new TimerTask() {
				@Override
				public void run() {
					/***********RANDOM NUM GEN -99 <-> +99***********/
					int START = -99;
					int END = 99;
					Random random = new Random();
					if (START > END) {
						throw new IllegalArgumentException("Start cannot exceed End.");
					}
					long range = (long)END - (long)START + 1;
					long fraction = (long)(range * random.nextDouble());
					int randomNumber =  (int)(fraction + START);  
					/***********************/
					Integer first = -1;
					log("Generated : " + randomNumber);
					if(randomNumber < 0){
						first = -2;
						System.out.println("first " + getNthDigit(Math.abs(randomNumber), 10, 2));
						System.out.println("second " + getNthDigit(Math.abs(randomNumber), 10, 1));
						refreshTemp(first,getNthDigit(Math.abs(randomNumber), 10, 2),getNthDigit(Math.abs(randomNumber), 10, 1));
					}else{
						first = -1;
						System.out.println("first " + getNthDigit(randomNumber, 10, 2));
						System.out.println("second " + getNthDigit(randomNumber, 10, 1));
						refreshTemp(first,getNthDigit(randomNumber, 10, 2),getNthDigit(randomNumber, 10, 1));
					}
				}
			}, 1000, 2000);
		}
    }

    public static final class Digit extends Parent {
        private static final boolean[][] DIGIT_COMBINATIONS = new boolean[][]{
                new boolean[]{true, false, true, true, true, true, true},//0
                new boolean[]{false, false, false, false, true, false, true},//1
                new boolean[]{true, true, true, false, true, true, false},//2
                new boolean[]{true, true, true, false, true, false, true},//3
                new boolean[]{false, true, false, true, true, false, true},//4
                new boolean[]{true, true, true, true, false, false, true},//5
                new boolean[]{true, true, true, true, false, true, true},//6
                new boolean[]{true, false, false, false, true, false, true},//7
                new boolean[]{true, true, true, true, true, true, true},//8
                new boolean[]{true, true, true, true, true, false, true},//9
                new boolean[]{false, false, false, false, false, false, false},//+
                new boolean[]{false, true, false, false, false, false, false}};//-
        private final Polygon[] polygons = new Polygon[]{
                new Polygon(2, 0, 52, 0, 42, 10, 12, 10),
                new Polygon(12, 49, 42, 49, 52, 54, 42, 59, 12f, 59f, 2f, 54f),
                new Polygon(12, 98, 42, 98, 52, 108, 2, 108),
                new Polygon(0, 2, 10, 12, 10, 47, 0, 52),
                new Polygon(44, 12, 54, 2, 54, 52, 44, 47),
                new Polygon(0, 56, 10, 61, 10, 96, 0, 106),
                new Polygon(44, 61, 54, 56, 54, 106, 44, 96)};
        private final Color onColor;
        private final Color offColor;


        public Digit(Color onColor, Color offColor,Effect offEffect) {
            this.onColor = onColor;
            this.offColor = offColor;
            getChildren().addAll(polygons);
            getTransforms().add(new Shear(-0.1,0));
            showNumber(0);
        }

		public void showNumber(Integer num) {
            if (num < 0 || num > 9){
            	if(num == -1){
            		num = 10;
            	}else if(num == -2){
            		num = 11;
            	}else{
            		num = 0;
            	} // default to 0 for non-valid numbers
            }
            for (int i = 0; i < 7; i++) {
                polygons[i].setFill(DIGIT_COMBINATIONS[num][i] ? onColor : offColor);
            }
        }
    }
}