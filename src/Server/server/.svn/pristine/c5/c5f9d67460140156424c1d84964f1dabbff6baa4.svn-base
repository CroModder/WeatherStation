package controller;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.UsersModel;
import model.WeatherStationModel;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;

public class DbController {
	
	private ErrorLogController errorLogController = new ErrorLogController();
	private static Connection connection = null;
	private PreparedStatement RegisterUser = null;
	private PreparedStatement LogInUser = null;
	private PreparedStatement NewWs = null;
	private PreparedStatement Ws = null;
	private PreparedStatement Users = null;
	public static ObservableList<WeatherStationModel> weatherStationData = FXCollections.observableArrayList();
	public static ObservableList<UsersModel> usersData = FXCollections.observableArrayList();
	public static ArrayList<UsersModel> userList = new ArrayList<UsersModel>();
	
	private static final String SQL_REGISTER = "INSERT INTO USERS (NAME,ROLE,PASSWORD)" + " VALUES(?, ?, ?)";
	private static final String SQL_REGISTER_SELECT = "SELECT NAME FROM USERS WHERE NAME = ?";
	private static final String SQL_AUTH = "SELECT ID, NAME, PASSWORD FROM USERS WHERE NAME = ? AND PASSWORD = ?";
	private static final String SQL_LOGIN_SELECT = "SELECT ID, NAME, PASSWORD, ROLE FROM USERS WHERE NAME = ? AND PASSWORD = ? AND ROLE = ?";
	private static final String SQL_NEW_WS = "INSERT INTO DEVICES (NAME,IP,PORT,IDUSER)" + " VALUES(?, ?, ?,?)";
	private static final String SQL_NEW_WS_SELECT = "SELECT DEVICES.ID, DEVICES.NAME, DEVICES.IP, DEVICES.PORT, USERS.ROLE FROM DEVICES INNER JOIN USERS ON  USERS.ID = DEVICES.IDUSER WHERE DEVICES.IDUSER = 1 OR DEVICES.IDUSER = ? ORDER BY DEVICES.ID";
	private static final String SQL_UPDATE_WS = "UPDATE DEVICES SET NAME = ?, IP = ?, PORT = ? WHERE ID = ?";
	private static final String SQL_DELETE_WS = "DELETE FROM DEVICES WHERE ID = ?";
	private static final String SQL_USER_ROLE = "SELECT ROLE FROM USERS WHERE ID = ?";
	private static final String SQL_EDIT_USER = "UPDATE USERS SET NAME = ?, ROLE = ? WHERE ID = ?";
	private static final String SQL_DELETE_USER = "DELETE FROM USERS WHERE ID = ?";
	//private static final String SQL_GET_INTERVAL = "SELECT INTERVAL FROM DEVICES WHERE ID = ?";
	//private static final String SQL_GET_DEVICES = "SELECT ID, NAME FROM DEVICES";
	
	public boolean dbInit() throws IOException{
		Boolean result;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			connection = DriverManager.getConnection("jdbc:oracle:thin:@194.95.45.165:1521:orcl","T13_SWP5","ss15_swp5");
			//System.out.println("Initialize Db connection " + connection);
			result = true;
		} catch (Exception e) {
            errorLogController.error(e.toString());
			System.out.print("Database connection error!" + e);
			result = false;
		}
		return result;
	}
	
	public ArrayList<UsersModel> getUsers() throws SQLException {
		PreparedStatement st = null;
		try {
			st = connection.prepareStatement("SELECT ID, NAME, EMAIL, ROLE FROM USERS ORDER BY ID");
			ResultSet rs = st.executeQuery();
			userList.clear();
			while (rs.next()) {
				userList.add(new UsersModel(rs.getInt("ID"), rs.getString("NAME"),rs.getString("EMAIL"),rs.getInt("ROLE")));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
	        if (st != null) {
	        	st.close();
	        }
	    }
		return userList;
	}
	
	public boolean authCheck(String userName, String password) throws Exception{
	boolean result = false;
		ResultSet rs = null;;
		try {
			connection.setAutoCommit(false);
			LogInUser = connection.prepareStatement(SQL_AUTH);
			LogInUser.setString(1,userName);
			LogInUser.setString(2,password);
			rs = LogInUser.executeQuery();
			connection.commit();
			while (rs.next()) {
				System.out.println(rs.getInt("ID"));
				result = true;
			}
			
		} catch (Exception e) {
            errorLogController.error(e.toString());
	        if (connection != null) {
	            try {
	                System.err.print("\n Log in Transaction is being rolled back\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep);
	            }
	        }
		} finally {
	        if (LogInUser != null) {
	        	LogInUser.close();
	        }
	        connection.setAutoCommit(true);
	    }
		return result;
	}
	
	public float checkInterval(int id){
		float interval = 0;
		return interval;
	}
	
	public String[] getDevices(){
		String[] interval = new String[2];
		return interval;
	}
	
	public String[] logIn(String userName, String password, Integer userAdmin) throws Exception{
		String [] result = new String[2];
		ResultSet rs = null;;
		try {
			connection.setAutoCommit(false);
			LogInUser = connection.prepareStatement(SQL_LOGIN_SELECT);
			LogInUser.setString(1,userName);
			LogInUser.setString(2,hash256(password));
			LogInUser.setInt(3, userAdmin);
			rs = LogInUser.executeQuery();
			connection.commit();
			while (rs.next()) {
				System.out.println(rs.getInt("ID"));
				result[0] = "true";
				result[1] = String.valueOf((rs.getInt("ID")));
			}
            /*int numberOfRows = LogInUser.executeUpdate();
            if (numberOfRows == 0) {
            	System.out.println("\nLogin doesn't exist\n");
            }
            else {
            	result[0] = "true";
            	System.out.println("\nLogIn exists\n");
            }*/
		} catch (Exception e) {
            errorLogController.error(e.toString());
	        if (connection != null) {
	            try {
	                System.err.print("\n Log in Transaction is being rolled back\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep);
	            }
	        }
		} finally {
	        if (LogInUser != null) {
	        	LogInUser.close();
	        }
	        connection.setAutoCommit(true);
	    }

		return result;
	}
	
	public String[] register(String userName, String password) throws SQLException{
		boolean result = false;
		String errorMessage = "";
		try {
			connection.setAutoCommit(false);
			RegisterUser = connection.prepareStatement(SQL_REGISTER_SELECT);
			RegisterUser.setString(1,userName);
            int numberOfRows = RegisterUser.executeUpdate();
            if (numberOfRows == 0) {
            	RegisterUser = connection.prepareStatement(SQL_REGISTER);
    			RegisterUser.setString(1,userName);
    			RegisterUser.setInt(2, 2);
    			RegisterUser.setString(3,hash256(password));
    			RegisterUser.executeUpdate();
    			connection.commit();
    			result = true;
            }
            else {
            	result = false;
            	errorMessage = "Username exists";
            }
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
	        System.out.print(e);
	        if (connection != null) {
	            try {
	                System.err.print("\nTransaction is being rolled back\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep);
	            }
	        }
		} finally {
	        if (RegisterUser != null) {
	            RegisterUser.close();
	        }
	        connection.setAutoCommit(true);
	    }
		return new String[] {String.valueOf(result), errorMessage};
	}
	
	public String[] newWs(String name, String ip, Integer port, Integer idUser) throws SQLException{
		boolean result = false;
		String errorMessage = "";
		try {
			connection.setAutoCommit(false);
			NewWs = connection.prepareStatement(SQL_NEW_WS);
			NewWs.setString(1,name);
			NewWs.setString(2,ip);
			NewWs.setInt(3,port);
			NewWs.setInt(4,idUser);
			NewWs.executeUpdate();
			connection.commit();
			result = true;
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			errorMessage("New Weather station error", "Device name or IP exists");
	        System.out.print(e);
	        if (connection != null) {
	            try {
	                System.err.print("\nTransaction is being rolled back -> New Weather station\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep.getSQLState());
	            }
	        }
	        result = false;
	        errorMessage = String.valueOf(e);
		}finally{
			if (NewWs != null) {
				NewWs.close();
	        }
	        connection.setAutoCommit(true);
		}
		return new String[] {String.valueOf(result),errorMessage};
	}
	
	public String[] editWs(Integer id, String name, String ip, Integer port) throws SQLException{
		boolean result = false;
		String errorMessage = "";
		try {
			connection.setAutoCommit(false);
			NewWs = connection.prepareStatement(SQL_UPDATE_WS);
			NewWs.setString(1,name);
			NewWs.setString(2,ip);
			NewWs.setInt(3,port);
			NewWs.setInt(4,id);
			NewWs.executeUpdate();
			connection.commit();
			result = true;
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			errorMessage("Edit Weather station error", "Device name or IP exists");
	        System.out.print(e.getMessage());
	        if (connection != null) {
	            try {
	                System.err.print("\nTransaction is being rolled back -> Update Weather station\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep);
	            }
	        }
	        result = false;
	        errorMessage = String.valueOf(e);
		}finally{
			if (NewWs != null) {
				NewWs.close();
	        }
	        connection.setAutoCommit(true);
		}
		return new String[] {String.valueOf(result),errorMessage};
	}
	
	public boolean deleteWs(int position) throws SQLException{
		boolean result = false;
		try {
			connection.setAutoCommit(false);
			Ws = connection.prepareStatement(SQL_DELETE_WS);
			Ws.setInt(1,weatherStationData.get(position).getId());
			Ws.executeUpdate();
			connection.commit();
			result = true;
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			 System.out.print(e);
		        if (connection != null) {
		            try {
		                System.err.print("\nTransaction is being rolled back -> Delete Weather station\n");
		                connection.rollback();
		            } catch(SQLException excep) {
		            	 System.out.print(excep);
		            }
		        }
		        result = false;
		} finally{
			if (Ws != null) {
				Ws.close();
	        }
	        connection.setAutoCommit(true);
		}
		return result;
	}

	public ObservableList<WeatherStationModel> allWS(Integer idUser) throws SQLException{
		ResultSet rs = null;
		int sizeObsesrList = weatherStationData.size();
		List<Integer> listID = new ArrayList<Integer>();
		List<Integer> listIDDataBase = new ArrayList<Integer>();
		if(sizeObsesrList > 0){
			for(int i=0;i<sizeObsesrList;i++){
				listID.add(weatherStationData.get(i).getId());
			}
		}
		try {
			connection.setAutoCommit(false);
			NewWs = connection.prepareStatement(SQL_NEW_WS_SELECT);
			NewWs.setInt(1,idUser);
			rs = NewWs.executeQuery();
			connection.commit();
			while (rs.next()) {
				if(sizeObsesrList > 0){
					listIDDataBase.add(Integer.valueOf(rs.getInt("ID")));
					if(listID.contains(rs.getInt("ID"))){
						Boolean selectedSave = weatherStationData.get(listID.indexOf(rs.getInt("ID"))).getSelected().getValue();
						weatherStationData.remove(listID.indexOf(rs.getInt("ID")));
						weatherStationData.add(listID.indexOf(rs.getInt("ID")), new WeatherStationModel(selectedSave, rs.getInt("ID"), rs.getString("NAME"), rs.getString("IP"),rs.getInt("PORT"), rs.getInt("ROLE")));
					}
					else if(listID.contains(rs.getInt("ID")) == false){
						weatherStationData.add(new WeatherStationModel(false, rs.getInt("ID"), rs.getString("NAME"), rs.getString("IP"),rs.getInt("PORT"), rs.getInt("ROLE")));
						listID.add(Integer.valueOf(rs.getInt("ID")));
					}
				}
				else{
					weatherStationData.add(new WeatherStationModel(false, rs.getInt("ID"), rs.getString("NAME"), rs.getString("IP"),rs.getInt("PORT"), rs.getInt("ROLE")));
				}
			}
			listID.removeAll(listIDDataBase);
			if(listID.size() > 0){
				for(int i=0;i<listID.size();i++){
					for(int j=0;j<weatherStationData.size();j++){
						if(listID.get(i) == weatherStationData.get(j).getId()){
							weatherStationData.remove(j);
						}
					}
				}
			}
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
	        if (connection != null) {
	            try {
	                System.err.print("\nTransaction is being rolled back -> List Weather station list\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep);
	            }
	        }
		}
		finally{
			if (NewWs != null) {
				NewWs.close();
				listID.clear();
				listIDDataBase.clear();
	        }
	        connection.setAutoCommit(true);
		}
        return weatherStationData;
	}
	
	public int roleUser(int id) throws SQLException{
		int userRole = 0;
		ResultSet rs = null;
		try {
			connection.setAutoCommit(false);
			LogInUser = connection.prepareStatement(SQL_USER_ROLE);
			LogInUser.setInt(1,id);
			LogInUser.executeUpdate();
			connection.commit();
            rs = LogInUser.executeQuery();
            while(rs.next()){
            	userRole = rs.getInt("ROLE");
            }
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
	        System.out.print(e);
	        if (connection != null) {
	            try {
	                System.err.print("\nTransaction is being rolled back user role\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep);
	            }
	        }
		} finally {
	        if (LogInUser != null) {
	        	LogInUser.close();
	        }
	        connection.setAutoCommit(true);
	    }
		
		return userRole;
	}
	
	public String[] editUser(String name, Integer role, Integer id) throws SQLException{
		boolean result = false;
		String errorMessage = "";
		try {
			connection.setAutoCommit(false);
			Users = connection.prepareStatement(SQL_EDIT_USER);
			Users.setString(1,name);
			Users.setInt(2,role);
			Users.setInt(3,id);
			Users.executeUpdate();
			connection.commit();
			result = true;
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			errorMessage("Edit user error", "User name exists");
	        System.out.print(e);
	        if (connection != null) {
	            try {
	                System.err.print("\nTransaction is being rolled back -> Update user\n");
	                connection.rollback();
	            } catch(SQLException excep) {
	            	 System.out.print(excep.getSQLState());
	            }
	        }
	        result = false;
	        errorMessage = String.valueOf(e);
		}finally{
			if (Users != null) {
				Users.close();
	        }
	        connection.setAutoCommit(true);
		}
		return new String[] {String.valueOf(result),errorMessage};
	}
	
	public boolean deleteUsers(Integer id) throws SQLException{
		boolean result = false;
		try {
			connection.setAutoCommit(false);
			Users = connection.prepareStatement(SQL_DELETE_USER);
			Users.setInt(1,id);
			Users.executeUpdate();
			connection.commit();
			result = true;
		} catch (Exception e) {
            try {
				errorLogController.error(e.toString());
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			 System.out.print(e);
		        if (connection != null) {
		            try {
		                System.err.print("\nTransaction is being rolled back -> Delete User\n");
		                connection.rollback();
		            } catch(SQLException excep) {
		            	 System.out.print(excep);
		            }
		        }
		        result = false;
		} finally{
			if (Users != null) {
				Users.close();
	        }
	        connection.setAutoCommit(true);
		}
		return result;
	}
	
	private void errorMessage(String title,String context){
		Alert alert = new Alert(AlertType.ERROR); 
	    alert.setTitle(title);
	    alert.setHeaderText(null);
	    alert.setContentText(context);
	    alert.showAndWait();
	}

	public static String hash256(String data) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(data.getBytes());
        return bytesToHex(md.digest());
    }
    public static String bytesToHex(byte[] bytes) {
        StringBuffer result = new StringBuffer();
        for (byte byt : bytes) result.append(Integer.toString((byt & 0xff) + 0x100, 16).substring(1));
        return result.toString();
    }
}
