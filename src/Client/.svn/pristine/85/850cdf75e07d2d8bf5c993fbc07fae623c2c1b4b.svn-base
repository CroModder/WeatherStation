package controller;

import java.util.Locale;
import java.util.ResourceBundle;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;

public class RegisterController{

	private DbController dbController = new DbController();

	@FXML
	private Label lbl1;
	@FXML
	private TextField txtUserName2;
	@FXML
	private Button btnRegister2;
	@FXML
	private Button btnCancelReg;
	@FXML
	private TextField txtPassword2;
	@FXML
	private TextField txtRePassword;
	@FXML
	private TextField txtEmail;
	@FXML
	private Label lblErrorMsg2;
	@FXML
	private Label lblRegTxt;
	@FXML
	private Label lblReg1;	
	@FXML
	private Label lblExampleEmail;
	@FXML
	private ProgressBar progressBar;
	
	Locale locale = new Locale(Language.getLanguage());
	ResourceBundle bundle = ResourceBundle.getBundle("language.lang", locale);
	
	public void initialize() {
		btnCancelReg.setText(bundle.getString("btnCancel"));
    	btnRegister2.setText(bundle.getString("btnRegister"));
    	lblExampleEmail.setText(bundle.getString("lblExampleEmail"));
    	lblReg1.setText(bundle.getString("lblReg1"));
    	//lblErrorMsg2.setText(bundle.getString("lblErrorMsg2"));
    	txtUserName2.setPromptText(bundle.getString("txtUserName"));
    	txtPassword2.setPromptText(bundle.getString("txtPassword"));
    	txtRePassword.setPromptText(bundle.getString("txtRePassword"));
    	txtEmail.setPromptText(bundle.getString("txtEmail"));
		
		progressBar.setProgress(-0.1);
		
	    txtPassword2.textProperty().addListener(new ChangeListener<String>() {
	        @Override
	        public void changed(ObservableValue<? extends String> observable,
	                            String oldValue, String newValue) {
        		String passwd = observable.getValue().toString();
        		if(passwd.length() == 0){
    	            progressBar.setProgress(-0.1);
        		}
        		if(passwd.matches(".*\\d.*")){
        			if(passwd.length() > 0 && passwd.length() < 4){
        				Double percentage = 25/100.0;
        	            progressBar.setProgress(percentage);
        			}else if(passwd.length() > 4 && passwd.length() < 8){
        				Double percentage = 50/100.0;
        	            progressBar.setProgress(percentage);
        			}
        		}else if(passwd.matches("[a-zA-Z]+")){
        			if(passwd.length() > 0 && passwd.length() < 4){
        				Double percentage = 25/100.0;
        	            progressBar.setProgress(percentage);
        			}else if(passwd.length() > 4 && passwd.length() < 8){
        				Double percentage = 50/100.0;
        	            progressBar.setProgress(percentage);
        			}
        		}else{
        			if(passwd.length() > 0 && passwd.length() < 4){
        				Double percentage = 40/100.0;
        	            progressBar.setProgress(percentage);
        			}else if(passwd.length() > 4 && passwd.length() < 6){
        				Double percentage = 85/100.0;
        	            progressBar.setProgress(percentage);
        			}else if(passwd.length() > 6 && passwd.length() < 8){
        				progressBar.setProgress(1);
        			}
        		}
	        }
	    });
	}

	@FXML
	public void register(ActionEvent event) throws Exception{	
		Object source = event.getSource();
		
		if (source instanceof Button) {
			
			if (txtPassword2.getText() == null || txtRePassword.getText() == null) {
		        lblErrorMsg2.setText(bundle.getString("errorNull"));
		    }
			
			StringBuilder retVal = new StringBuilder();

			if(txtPassword2.getText().isEmpty() || txtRePassword.getText().isEmpty() || txtUserName2.getText().isEmpty()){
				lblErrorMsg2.setText(bundle.getString("errorEmptyFields"));
				retVal.append("Empty fields <br>");
			}
			else{
				
				if(txtPassword2.getText().equals(txtRePassword.getText())){
					if(Integer.valueOf(txtPassword2.getText().length()) < 4 && Integer.valueOf(txtRePassword.getText().length()) < 4){
						lblErrorMsg2.setText(bundle.getString("errorPasswordShort"));
						retVal.append("Password is too short. Needs to have 4 characters <br>");
					}
				}
				else {					
					lblErrorMsg2.setText(bundle.getString("errorPasswordsNotMatch"));
					retVal.append("Passwords do not match<br>");				
				}
				if (retVal.length() == 0) {
					String result[] = {""};
					try {
						result = dbController.register(txtUserName2.getText(),txtPassword2.getText());
					} catch (Exception e) {
					}
					if(result[0] == "true"){
						lblErrorMsg2.setText("");
					    retVal.append("Registered!");
					    Alert alert = new Alert(AlertType.INFORMATION); 
					    Locale locale = new Locale(Language.getLanguage());
				    	ResourceBundle bundle = ResourceBundle.getBundle("language.lang", locale);
					    alert.setTitle(bundle.getString("alertTitleRegister"));
					    alert.setHeaderText(null);
					    alert.setContentText("Thank you " + txtUserName2.getText() + " for your registration. \nYou can log in now.");
					    alert.showAndWait();
						((Node)(event.getSource())).getScene().getWindow().hide();
					}
					else{
						lblErrorMsg2.setText(result[1]);
						retVal.append(result[1]);
						txtUserName2.setText("");
					}
				}
			}
			txtPassword2.clear();
			txtRePassword.clear();
		}
	}
	
	@FXML
	public void cancelRegistration(ActionEvent event) throws Exception{
		((Node)(event.getSource())).getScene().getWindow().hide();
	}

}
