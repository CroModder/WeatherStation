package controller;

import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

import model.RecordingModel;
import model.WeatherStationModel;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DateCell;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.Slider;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeTableColumn;
import javafx.scene.control.TreeTableView;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.util.Callback;
import javafx.beans.property.ReadOnlyStringWrapper;

public class RecordController {
	
	private DbController dbController = new DbController();
	private List<CheckBox> checkBoxes = new LinkedList<CheckBox>();
	private String selectedWs = "";
	private List<RecordingModel> selectedData;
	private TreeItem<RecordingModel> root = new TreeItem<>(new RecordingModel());
 	private TreeItem<RecordingModel> root1 = new TreeItem<>(new RecordingModel());
 	private TreeTableColumn<RecordingModel, String> selectedDataColumn    = new TreeTableColumn<>("Recording devices");
 	private int mainSelectedWs = -1;
 	private int mainSensorWs = -1;
	
	@FXML
    private DatePicker dateBegin;
    @FXML
    private DatePicker dateEnd;
    @FXML
    private ComboBox<String> comboButtonWs;
    @FXML
    private Button btnCancel;
    @FXML
    private Button btnOk;
    @FXML
    private RadioButton radioMinutes;
    @FXML
    private RadioButton radioHours;
    @FXML
    private Slider sliderFreq;
    @FXML
    private Label lblFreq;
    @FXML
    private TreeTableView<RecordingModel> treeSelection;
    @FXML
    private CheckBox checkTemp;
    @FXML
    private CheckBox checkAir;
    @FXML
    private CheckBox checkMag;
    @FXML
    private CheckBox checkMov;
    @FXML
    private Button btnAddCheck;
    @FXML
    private ImageView imageRecord;
    @FXML
    private Label lblRecordingTitle;
    @FXML
    private Pane paneRecordingTitle;
    @FXML
    private Button btnClear;
    
    @SuppressWarnings("unchecked")
	public void initialize() {

    	if(Language.getLanguage().equals("de_de")){
    		Locale.setDefault(Locale.GERMAN);
    	}
    	
    	Image image = new Image("/img/recordingIcon.png");
    	imageRecord.setImage(image);
    	imageRecord.setFitWidth(100);
    	imageRecord.setPreserveRatio(true);
    	imageRecord.setSmooth(true);
    	imageRecord.setCache(true);
    	imageRecord.setLayoutX(35);
    	imageRecord.setLayoutY(8);
    	dateBegin.setValue(LocalDate.now());
    	lblRecordingTitle.setText("Weather Station's will diretcly store \nrecorded measurements in database.");
    	
        paneRecordingTitle.setStyle(
                "-fx-background-color: #03A9F4; " +
                "-fx-effect: dropshadow(three-pass-box, #8d8d8d, 10, 0, 0, 0);");
    	
    	Callback<DatePicker, DateCell> dayCellFactoryBegindate = dp -> new DateCell()
        {
            @Override
            public void updateItem(LocalDate item, boolean empty)
            {
                super.updateItem(item, empty);

                if(item.isBefore(LocalDate.now()) || item.isAfter(LocalDate.now().plusYears(1)))
                {
                    setStyle("-fx-background-color: #ffc0cb; -fx-text-fill: darkgray;");
                    setDisable(true);
                }
            }
        };
        
        final Callback<DatePicker, DateCell> dayCellFactoryEndaDate = 
                new Callback<DatePicker, DateCell>() {
                    @Override
                    public DateCell call(final DatePicker datePicker) {
                        return new DateCell() {
                            @Override
                            public void updateItem(LocalDate item, boolean empty) {
                                super.updateItem(item, empty);
                                try {
                                    if (item.isBefore(dateBegin.getValue())){
                                    	setDisable(true);
                                        setStyle("-fx-background-color: #ffc0cb;");
                                    }
								} catch (Exception e) {
								    dateBegin.setValue(LocalDate.now());
								}
                            }
                        };
                    }
            	};
         dateBegin.setDayCellFactory(dayCellFactoryBegindate);
         dateEnd.setDayCellFactory(dayCellFactoryEndaDate);
         dateEnd.setValue(dateBegin.getValue());
         
         
         selectedDataColumn.setPrefWidth(194.0);
     	 selectedDataColumn.setCellValueFactory(
     	 (TreeTableColumn.CellDataFeatures<RecordingModel, String> param) -> new ReadOnlyStringWrapper("" + param.getValue().getValue().getData()));
    	 treeSelection.getColumns().addAll(selectedDataColumn);
         
         initCombo();
         initSlider(1);
         radioMinutes.setSelected(true);
    }
    
    private void initCombo(){
        try {
       	 ObservableList<WeatherStationModel> object = dbController.allWS(LogInController.getLogUserId());
       	 for(int i=0;i<object.size();i++){
       		 comboButtonWs.getItems().addAll(object.get(i).getName());
       	 }
       	 comboButtonWs.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>(){
       		 public void changed(ObservableValue<? extends String> observable,String oldValue,String newValue) 
       		 	{
       			 	selectedWs = newValue;
       		 	}   
       	});
       	 
		} catch (SQLException e) {
			e.printStackTrace();
		}
    }
    
    private void initSlider(int minHour){
    	if(minHour == 1){
            sliderFreq.setMin(1);
            sliderFreq.setMax(60);
            sliderFreq.setValue(25);
            sliderFreq.setShowTickMarks(true);
            lblFreq.setText(Double.toString(sliderFreq.getValue()));
            
            sliderFreq.valueProperty().addListener(new ChangeListener<Number>() {
                public void changed(ObservableValue<? extends Number> ov,
                    Number old_val, Number new_val) {
                        lblFreq.setText(String.format("%.0f" + " min", new_val));
                }
            });
    	}
    	else if (minHour == 2) {
            sliderFreq.setMin(1);
            sliderFreq.setMax(24);
            sliderFreq.setValue(12);
            sliderFreq.setShowTickMarks(true);
            lblFreq.setText(Double.toString(sliderFreq.getValue()));
            
            sliderFreq.valueProperty().addListener(new ChangeListener<Number>() {
                public void changed(ObservableValue<? extends Number> ov,
                    Number old_val, Number new_val) {
                        lblFreq.setText(String.format("%.0f" + " h", new_val));
                }
            });
		}
    }
    
    @FXML
    private void minutesSlider(ActionEvent event){
    	if(radioMinutes.isSelected()){
    		initSlider(1);
    		radioHours.setSelected(false);
    	}
    }
    
    @FXML
    private void hoursSlider(ActionEvent event){
    	if(radioHours.isSelected()){
    		initSlider(2);
    		radioMinutes.setSelected(false);
    	}
    }
    
    @FXML
    private void addSelection(ActionEvent event){
    	Boolean duplicate = false;
    	if(selectedWs.isEmpty()){
    		warningWin("Select Weather Station","Please select prefered Weather station from drop down menu!");
    	}
    	else{
    		if(root.getChildren().size() > 0){
    			for(int i=0;i<root.getChildren().size();i++){
    				if(root.getChildren().get(i).getValue().getData().equals(selectedWs)){
                		warningWin("Weather Station selection", root.getChildren().get(i).getValue().getData() + " is allready added in recording parameters\n Please select different Weather Station");
                		duplicate = true;
    				}
    			}
    		}
    		if(duplicate == false){
            	List<RecordingModel> temp = new ArrayList<>();
            	checkBoxes.add(checkAir);
            	checkBoxes.add(checkMag);
            	checkBoxes.add(checkMov);
            	checkBoxes.add(checkTemp);
            	for(int i=0;i<checkBoxes.size();i++){
            		if(checkBoxes.get(i).isSelected()){
            			temp.add(new RecordingModel(String.valueOf(checkBoxes.get(i).getText())));
            		}
            	}
            	if(temp.isEmpty()){
            		warningWin("Select sensors","Please select prefered sensors for recording!");
            	    checkBoxes.clear();
            	} 
            	else {
            		root.setExpanded(true);
                 	root1 = new TreeItem<>(new RecordingModel(selectedWs));
                 	root1.setExpanded(true);
                	root.getChildren().add(root1);
                	treeSelection.setRoot(root);
                	treeSelection.setShowRoot(false);
                	selectedData = temp;
                	selectedData.stream().forEach((recordModel) -> { 
                		root1.getChildren().add(new TreeItem<>(recordModel));
                	});
                	selectedData = temp;
                	checkBoxes.clear();
                	duplicate = false;
    			}
    		}
    	}
    }
    
    @FXML
    private void clear(){
    	if(mainSelectedWs == -1 && mainSensorWs == -1){
    		warningWin("Clear selection", "Please choose some elements from table");
    	} else if(mainSelectedWs > -1 && mainSensorWs == -1){
    		root.getChildren().remove(mainSelectedWs);
    	} else{
    		root.getChildren().get(mainSelectedWs).getChildren().remove(mainSensorWs);
    	}
    	for(int i=0;i<root.getChildren().size();i++){
    		if(root.getChildren().get(i).getChildren().size() == 0){
    			root.getChildren().remove(i);
    		}
    	}
    	mainSelectedWs = -1;
    	mainSensorWs = -1;
    }
    
    @FXML
    private void getSelectedData(){
    	mainSelectedWs = -1;
    	mainSensorWs = -1;
    	int selectionIndex = treeSelection.getSelectionModel().getSelectedIndex()+1;
    	int compare = 0;
    	for(int a=0;a<root.getChildren().size();a++){
    		compare ++;
    		if(compare == selectionIndex){
    			mainSelectedWs = a;
    			break;
    		}
        	for(int i=0;i<root.getChildren().get(a).getChildren().size();i++){
        		compare ++;
        		if(compare == selectionIndex){
            		mainSelectedWs = a;
            		mainSensorWs = i;
            		break;
        		}
        	}
    	}
    }
    
    private void warningWin(String title, String content){
		Alert alert = new Alert(AlertType.WARNING); 
	    alert.setTitle(title);
	    alert.setHeaderText(null);
	    alert.setContentText(content);
	    alert.showAndWait();
    }

    
    @FXML
    private void cancel(ActionEvent event) {
    	((Node)(event.getSource())).getScene().getWindow().hide();
    }

    @FXML
    private void confirm(ActionEvent event) {
    	
    }
}

