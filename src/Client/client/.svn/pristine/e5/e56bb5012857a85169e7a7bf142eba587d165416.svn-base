package controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.Locale;
import java.util.ResourceBundle;
import org.json.JSONArray;
import org.json.JSONObject;
import socket.Client;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuButton;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.scene.control.MenuItem;

public class LogInController implements Initializable, ControlledScreen {
  
  private ScreensController myController;
  private DbController dbController = new DbController();
  private ErrorLogController errorLogController = new ErrorLogController();
  private static HomeController homeController = new HomeController();
  private static HomeAdminController homeAdminController = new HomeAdminController();
  private Locale locale = null;
  private ResourceBundle bundle = null;
  private static Integer userAdmin = 2;
  public static Integer logUserId = 15;
  public static Client client = new Client();
  
  public static Integer getUserAdmin() {
	return userAdmin;
  }
  
  public static Integer getLogUserId() {
    return logUserId;
  }
  
  public static void setHomeController(HomeController homeController) {
	LogInController.homeController = homeController;
  }

  public static void setHomeAdminController(
		HomeAdminController homeAdminController) {
	  		LogInController.homeAdminController = homeAdminController;
	}

  @FXML
  private TextField txtUserName;
  @FXML
  private PasswordField txtPassword;
  @FXML
  private Button btnLogin;
  @FXML
  private Button btnCancel;
  @FXML
  private Button btnRegister;
  @FXML
  private MenuButton menuBtnUserAdmin;
  @FXML
  private MenuItem menuBtnAdmin;
  @FXML
  private MenuItem menuBtnUser;
  @FXML
  private ImageView WeatherStationLogo;
  @FXML
  private Label lblErrorMsg;
  @FXML
  private Label lblRegTxt;
  @FXML
  private Button buttonForgotPasswd;
  
    @Override
    public void initialize(URL url, ResourceBundle rb) {  	
      buttonForgotPasswd.setStyle("-fx-background-color: transparent;");
      LanguageController.setLogInController(this);
      ScreensController.setLogInController(this);
      language();
      System.out.println("\nClient " + client);
    }
    
  //==========================Language==========================
    public void language(){
    	locale = Locale.getDefault();
    	if(Language.getLanguage() == null){
    		 if(locale.equals(Locale.ENGLISH) || locale.equals(Locale.US)){
    		      	Language.setLanguage("en_en");
    		      	locale = new Locale(Language.getLanguage());
    		 }else if(locale.equals("hr_HR")){
    			 Language.setLanguage("hr_HR");
    			 locale = new Locale(Language.getLanguage());
    		 }else{
    			 Language.setLanguage("de_de");
    			 locale = new Locale(Language.getLanguage());
    		 }
    	} else{
    		locale = new Locale(Language.getLanguage());
    	}
    	bundle = ResourceBundle.getBundle("language.lang", locale);
    	System.out.println("resoruce "  +bundle.getString("btnLogin"));
    	btnLogin.setText(bundle.getString("btnLogin"));
        btnCancel.setText(bundle.getString("btnCancel"));
        btnRegister.setText(bundle.getString("btnRegisterNow"));
        menuBtnAdmin.setText(bundle.getString("menuBtnAdmin"));
        menuBtnUser.setText(bundle.getString("menuBtnUser"));
        if(userAdmin == 2){
        	 menuBtnUserAdmin.setText(bundle.getString("menuBtnUser"));
        }
        else{
        	menuBtnUserAdmin.setText(bundle.getString("menuBtnAdmin"));
        }             
        lblRegTxt.setText(bundle.getString("lblRegTxt"));
        txtUserName.setPromptText(bundle.getString("txtUserName"));
        txtPassword.setPromptText(bundle.getString("txtPassword"));
        buttonForgotPasswd.setText(bundle.getString("lblForgotPasswd"));
    }
    //==========================Language==========================
    
    public void setScreenParent(ScreensController screenParent){
        myController = screenParent;
    }
  
  @FXML
  public void logIn(ActionEvent event) throws Exception{
    Object source = event.getSource();
    String[] result = new String[2];
    if (source instanceof Button) {
      if(txtUserName.getText().isEmpty() || txtPassword.getText().isEmpty()){
        locale = new Locale(Language.getLanguage());
        ResourceBundle bundle = ResourceBundle.getBundle("language.lang", locale);
        lblErrorMsg.setText(bundle.getString("errorEmpty"));        
        txtPassword.clear();
      }else if ((txtUserName.getText().isEmpty() == false && txtPassword.getText().isEmpty() == false)){
        try {
          result = dbController.logIn(txtUserName.getText(), txtPassword.getText(),userAdmin);
          if(result[0] == "true"){
            try {
              txtPassword.setText("");
              lblErrorMsg.setText("");
              logUserId = Integer.valueOf(result[1]);
              if(userAdmin.intValue() == 1){
            	  Language.setLanguage(getUserLanguage(logUserId));
            	  homeAdminController.language();
                  myController.setScreen(ScreensFramework.screen3ID);
                 // language();
              } else{
            	  Language.setLanguage(getUserLanguage(logUserId));
            	  homeController.language();
                  myController.setScreen(ScreensFramework.screen2ID);
                 // language();
              }
            } catch (Exception e) {
                errorLogController.error(e.toString());
                System.out.println("an error has occurred (Home window opening)");
            }
          }
          else{
            locale = new Locale(Language.getLanguage());
            ResourceBundle bundle = ResourceBundle.getBundle("language.lang", locale);
            lblErrorMsg.setText(bundle.getString("errorIncorrect"));
            txtPassword.clear();
          }
        } catch (Exception e) {
            errorLogController.error(e.toString());
        	System.out.println("Error while proccessing login");
        }
      }  
    }
  }
  
  @FXML
  public void enterConfirm(KeyEvent ke) throws Exception{
   if(ke.getCode().equals(KeyCode.ENTER)){
      String[] result = new String[2];
      if(txtUserName.getText().isEmpty() || txtPassword.getText().isEmpty()){
        locale = new Locale(Language.getLanguage());
          ResourceBundle bundle = ResourceBundle.getBundle("language.lang", locale);
        lblErrorMsg.setText(bundle.getString("errorEmpty"));
        txtPassword.clear();
      }else if ((txtUserName.getText().isEmpty() == false && txtPassword.getText().isEmpty() == false)){
        try {
          result = dbController.logIn(txtUserName.getText(), txtPassword.getText(),userAdmin);
          if(result[0] == "true"){
            try {             
              txtPassword.setText("");
              lblErrorMsg.setText("");
              logUserId = Integer.valueOf(result[1]);
              if(userAdmin.intValue() == 1){
            	  Language.setLanguage(getUserLanguage(logUserId));
            	  homeAdminController.language();
                  myController.setScreen(ScreensFramework.screen3ID);
                //  language();
              } else{
            	  Language.setLanguage(getUserLanguage(logUserId));
            	  homeController.language();
            	  System.out.println("mario" + getUserLanguage(logUserId));
                  myController.setScreen(ScreensFramework.screen2ID);
               //   language();
              }
            } catch (Exception e) {
                errorLogController.error(e.toString());
            	System.out.println("an error has occurred (Home window opening)");
            }
          }
          else{
        	  locale = new Locale(Language.getLanguage());
              ResourceBundle bundle = ResourceBundle.getBundle("language.lang", locale);
              lblErrorMsg.setText(bundle.getString("errorIncorrect"));
              txtPassword.clear();
          }
        } catch (Exception e) {
            errorLogController.error(e.toString());
            System.out.println("Error while proccessing login");
        }
      }   
    }
  }
  
    
  @FXML
  public void choiceUserAdmin(ActionEvent event){
	if(event.getSource().equals(menuBtnAdmin)){
      menuBtnUserAdmin.setText(menuBtnAdmin.getText());
      userAdmin = 1;
    }
    else{
      menuBtnUserAdmin.setText(menuBtnUser.getText());
      userAdmin = 2;
    }
  }
    
    @FXML
    private void forgotPasswd(ActionEvent event) throws IOException{
      try {
    	  BorderPane page = (BorderPane) FXMLLoader.load(getClass().getResource("/view/EmailPinView.fxml"));
          Scene secondScene = new Scene(page);
          Stage secondStage = new Stage();
          page.getStylesheets().add("/view/style.css");
          locale = new Locale(Language.getLanguage());
          secondStage.setTitle(bundle.getString("stageTitleVerification"));
          secondStage.setScene(secondScene);
          secondStage.setResizable(false);
          secondStage.initModality(Modality.WINDOW_MODAL);
          secondStage.initOwner(((Node)event.getSource()).getScene().getWindow() );
          secondStage.show();
          EmailPinController.setEmailPinStage(secondStage);
          EmailPinController.setEmailPinPane(page);
      } catch (Exception e) {
          errorLogController.error(e.toString());
    	  System.out.println("error on opening Register occurred");
      }
    }
    
    @FXML
    private void changeColor(MouseEvent event){
    	if(event.getEventType().toString().equals("MOUSE_ENTERED")){
    		buttonForgotPasswd.setStyle("-fx-background-color: transparent;"  +
    				"-fx-underline: true;");
    	}else {
    		buttonForgotPasswd.setStyle("-fx-background-color: transparent;"  +
    				"-fx-underline: false;");
    	}
    }
    
    public String getUserLanguage(Integer id){
		Boolean exist = false;
		String returnLang = "";
		File f = new File("Ws_config.json");
		if(f.exists()){
		   try (BufferedReader br = new BufferedReader(new FileReader("Ws_config.json")))
			{
				String sCurrentLine;
				StringBuilder stringObj = new StringBuilder();
	 
				while ((sCurrentLine = br.readLine()) != null) {
					stringObj.append(sCurrentLine.toString());
				}
				System.out.println(stringObj);
				JSONObject main= new JSONObject(stringObj.toString());
				JSONObject object= new JSONObject();
				JSONArray array= new JSONArray(main.get("users").toString());
				for(int i=0;i<array.length();i++){
					object= new JSONObject(array.get(i).toString());
					if(object.getInt("id") == id){
						System.out.println("postoji");
						returnLang = object.getString("language").toString();
						exist = true;
					}
				}if(exist == false){
					System.out.println("\nMetoda nema user u json" + Language.getLanguage());
					returnLang = Language.getLanguage();
				}
			}catch (Exception e) {
				
			}
		}else{
			returnLang = Language.getLanguage();
		}
		return returnLang;
	}
    
    public void saveLanguage(Integer id,String lang){
		Boolean exist = false;
		File f = new File("Ws_config.json");
		if(f.exists()){
		   try (BufferedReader br = new BufferedReader(new FileReader("Ws_config.json")))
			{
				String sCurrentLine;
				StringBuilder stringObj = new StringBuilder();
	 
				while ((sCurrentLine = br.readLine()) != null) {
					stringObj.append(sCurrentLine.toString());
				}
				System.out.println("PISEM U DAT");
				JSONObject main= new JSONObject(stringObj.toString());
				JSONObject object= new JSONObject();
				JSONArray array= new JSONArray(main.get("users").toString());
				for(int i=0;i<array.length();i++){
					object= new JSONObject(array.get(i).toString());
					if(object.getInt("id") == id){
						array.remove(i);
						object.put("language", lang);
						object.put("id", id);
						array.put(object);
						main.put("users", array);
						jsonWrite(main);
						exist = true;
						break;
					}
				}					if(exist.equals(false)){
					System.out.println("\nnNe postoji");
					object.put("id", id);
					object.put("language", lang);
					array.put(object);
					main.put("users", array);
					jsonWrite(main);
					}
			}catch (Exception e) {
			}
		}else{
		System.out.println("\nstvori");
		JSONObject main = new JSONObject();
    	JSONObject obj = new JSONObject();
    	JSONArray language = new JSONArray();
    	obj.put("id", id);
    	obj.put("language", lang);
    	language.put(obj);
    	main.put("users", language);
    	jsonWrite(main);
		
	}
    }

	private void jsonWrite(JSONObject main){
		FileWriter file = null;
		try {
			file = new FileWriter("Ws_config.json");
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	    try {
	        file.write(main.toString());
	        System.out.println("Successfully Copied JSON Object to File...");
	
	    } catch (IOException e) {
	        e.printStackTrace();
	
	    } finally {
	        try {
				file.flush();
			} catch (IOException e) {
				e.printStackTrace();
			}
	        try {
				file.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
	    }
	}	
  
  @FXML
  public void startRegister(ActionEvent event) throws Exception{
    try {
    	AnchorPane page = (AnchorPane) FXMLLoader.load(getClass().getResource("/view/RegisterView.fxml"));
        Scene secondScene = new Scene(page);
        Stage secondStage = new Stage();
        page.getStylesheets().add("/view/style.css");
        locale = new Locale(Language.getLanguage());
        bundle = ResourceBundle.getBundle("language.lang", locale);
        secondStage.getIcons().add(new Image("img/WeatherStationLogo.png"));
        secondStage.setTitle(bundle.getString("registerTitle"));
        secondStage.setScene(secondScene);
        secondStage.setResizable(false);
        secondStage.initModality(Modality.WINDOW_MODAL);
        secondStage.initOwner(((Node)event.getSource()).getScene().getWindow() );
        secondStage.show();
    } catch (Exception e) {
        errorLogController.error(e.toString());
        System.out.println("error on opening Register occurred");
    }
  }
    
  @FXML
  public void cancelLogIn(ActionEvent event) {
      Stage stage = (Stage) btnCancel.getScene().getWindow();
      stage.close();
  }
}
