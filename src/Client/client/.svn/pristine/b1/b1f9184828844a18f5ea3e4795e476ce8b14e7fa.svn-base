package controller;

import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;

import model.HistoricalWeatherStationModel;
import javafx.beans.property.BooleanProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.CheckBox;
import javafx.scene.control.DateCell;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.RadioButton;
import javafx.scene.control.Tab;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.Tooltip;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import javafx.util.Callback;
public class HistoricalController {

	private DbController dbController = new DbController();
	private Locale locale;
	private ResourceBundle bundle;
	/*****/
	private Date date;
	/****/
	
	@FXML 
	private LineChart<Double, Double> graphTemp;
	@FXML
    private Tab tabTemperature;
	@FXML 
	private LineChart<Double, Double> graphAirPressure;
	@FXML
    private Tab tabAirPressure;
	@FXML 
	private LineChart<Double, Double> graphMagneticField;
	@FXML
    private Tab tabMagneticField;
	@FXML
    private Tab tabMovement;
    @FXML
    private DatePicker dpBeginDate;
    @FXML
    private DatePicker dpEndDate;
    @FXML
    private RadioButton rbBar;
    @FXML
    private RadioButton rbHectoPascal;
    @FXML
    private RadioButton rbCelsius;
    @FXML
    private RadioButton rbFahrenheit;
    @FXML
    private Text lblMeasurementUnitTemp;
    @FXML
    private Text lblMeasurementUnitAirP;
    @FXML
    private MenuItem menuItemBar;
    @FXML
    private MenuItem menuItemhPa;
    @FXML
    private Label lblBeginDate;
    @FXML
    private Label lblEndDate;
    @FXML
	private TableView<HistoricalWeatherStationModel> WsTable;
	@FXML
	private TableColumn<HistoricalWeatherStationModel, Boolean> tableColCheck;
	@FXML
	private TableColumn<HistoricalWeatherStationModel, String> tableColWs;
    
    LanguageController languageController = new LanguageController();
	LineChart.Series<Double, Double> series1 = new LineChart.Series<Double, Double>();
    LineChart.Series<Double, Double> series2 = new LineChart.Series<Double, Double>();
    
    public void initialize() {
    	
    	if(Language.getLanguage().equals("de_de")){
    		Locale.setDefault(Locale.GERMAN);
    	}
    	
    	initTable();
    	rbCelsius.setSelected(true);
    	rbBar.setSelected(true);
    	
    	//==========================Language==========================
    	locale = new Locale(Language.getLanguage());
    	bundle = ResourceBundle.getBundle("language.lang", locale);
    	
    	lblBeginDate.setText(bundle.getString("lblBeginDate"));
    	lblEndDate.setText(bundle.getString("lblEndDate"));
    	tabTemperature.setText(bundle.getString("Temperature"));
    	tabAirPressure.setText(bundle.getString("AirPressure"));
    	tabMagneticField.setText(bundle.getString("MagneticField"));
    	tabMovement.setText(bundle.getString("Movement"));
    	tableColWs.setText(bundle.getString("WeatherStation"));
    	rbHectoPascal.setText(bundle.getString("HectoPascal"));
    	//==========================Language==========================
    		
    	//========================datePicker========================   	
    	final Callback<DatePicker, DateCell> dayCellFactory1 = new Callback<DatePicker, DateCell>() {		    
    		@Override
		    public DateCell call(final DatePicker datePicker) {
		        return new DateCell() {
		            @Override
		            public void updateItem(LocalDate item, boolean empty) {
		                super.updateItem(item, empty);		                
		                if(item.isAfter(LocalDate.now())){		                	
		                	setDisable(true);
		                    setStyle("-fx-background-color: #ffecee;");
		                }
		            }
		        };
		    }
		 };
		 dpBeginDate.setDayCellFactory(dayCellFactory1);		 
		//========================DatePicker========================
		 
		//========================LineChart========================= 
    	ObservableList<XYChart.Series<Double, Double>> lineChartData = FXCollections.observableArrayList();
		        
        series1.setName("Ws#1");
        
        series1.setName("Ws#1");
        series1.getData().add(new XYChart.Data<Double, Double>(0.0, 1.6));
        series1.getData().add(new XYChart.Data<Double, Double>(0.8, 0.4));
        series1.getData().add(new XYChart.Data<Double, Double>(1.4, 2.9));
        series1.getData().add(new XYChart.Data<Double, Double>(2.1, 1.3));
        series1.getData().add(new XYChart.Data<Double, Double>(2.6, 0.9));
        
        lineChartData.add(series1);
        
		series2.setName("Ws#2");
			        
		series2.setName("Ws#2");
		series2.getData().add(new XYChart.Data<Double, Double>(0.5, 1.0));
		series2.getData().add(new XYChart.Data<Double, Double>(0.5, 0.1));
		series2.getData().add(new XYChart.Data<Double, Double>(2.4, 2.0));
		series2.getData().add(new XYChart.Data<Double, Double>(3.1, 5.0));
		series2.getData().add(new XYChart.Data<Double, Double>(1.6, 2.0));
			        
		lineChartData.add(series2);
        graphTemp.setData(lineChartData);
        graphTemp.createSymbolsProperty();
	    //========================LineChart========================= 
    }
    
    //==================Measurement units========================
    @FXML
    void barHectoPascal(ActionEvent event) {
    	if(event.getSource().equals(rbBar)){
    		rbBar.setSelected(true);
    		rbHectoPascal.setSelected(false);
    	}
    	else if(event.getSource().equals(rbHectoPascal)){
    		rbHectoPascal.setSelected(true);
    		rbBar.setSelected(false);
    	}
    }

    @FXML
    void celsiusFahrenheit(ActionEvent event) {
    	if(event.getSource().equals(rbCelsius)){
    		rbCelsius.setSelected(true);
    		rbFahrenheit.setSelected(false);
    	}
    	else if(event.getSource().equals(rbFahrenheit)){
    		rbFahrenheit.setSelected(true);
    		rbCelsius.setSelected(false);
    	}
    }
    //==================Measurement units========================
    
    //=============================DatePicker============================= 
    @FXML
    public void datePicker(){ 

		final Callback<DatePicker, DateCell> dayCellFactory2 = new Callback<DatePicker, DateCell>() {
		    @Override
		    public DateCell call(final DatePicker datePicker) {	    	
		        return new DateCell() {
		            @Override
		            public void updateItem(LocalDate item, boolean empty) {
		                super.updateItem(item, empty);		           
		                try {
		                	if(!dpBeginDate.getValue().equals(null)){
		                		if (item.isBefore(dpBeginDate.getValue())) {
		                            setDisable(true);
		                            setStyle("-fx-background-color: #ffecee;");
			                    }
			                    long p = ChronoUnit.DAYS.between(dpBeginDate.getValue(), item);
			                    locale = new Locale(Language.getLanguage());
			                	bundle = ResourceBundle.getBundle("language.lang", locale);
			                    setTooltip(new Tooltip(p + " " + bundle.getString("days")));
		                	}
		                	else{
		                		setDisable(true);
								setStyle("-fx-background-color: #ffecee;");
		                	}        	
						} catch (Exception e) {
							setDisable(true);
							setStyle("-fx-background-color: #ffecee;");
						}
		            }
		        };
		    }
		 };
		 dpEndDate.setDayCellFactory(dayCellFactory2);
		 dpEndDate.setValue(dpBeginDate.getValue());
   	}
    //=============================DatePicker============================= 
    
    //=============================WsTable=============================
    public void initTable(){
    	ObservableList<HistoricalWeatherStationModel> data = null;
		try {
			data = dbController.historicalAllWs(LogInController.getLogUserId());
		} catch (SQLException e1) {
			e1.printStackTrace();
		}

		tableColCheck.setMinWidth(50);
		tableColCheck.setCellValueFactory(new PropertyValueFactory<HistoricalWeatherStationModel, Boolean>("selected"));
		tableColCheck.setCellFactory(new Callback<TableColumn<HistoricalWeatherStationModel, Boolean>, TableCell<HistoricalWeatherStationModel, Boolean>>() {
		    public TableCell<HistoricalWeatherStationModel, Boolean> call(TableColumn<HistoricalWeatherStationModel, Boolean> p) {
		        return new CheckBoxTableCell<HistoricalWeatherStationModel, Boolean>();
		    }
		});

		tableColWs.setCellValueFactory(new PropertyValueFactory<HistoricalWeatherStationModel, String>("name"));
		WsTable.setItems(data);
		WsTable.setEditable(false);
    }   
    
    public class CheckBoxTableCell<S, T> extends TableCell<S, T> {
        private final CheckBox checkBox;
        private ObservableValue<T> ov;

        public CheckBoxTableCell() {
            this.checkBox = new CheckBox();
            this.checkBox.setAlignment(Pos.CENTER);
            setAlignment(Pos.CENTER);
            setGraphic(checkBox);
        } 
         
        @Override 
        public void updateItem(T item, boolean empty) {
            super.updateItem(item, empty);
            if (empty) {
                setText(null);
                setGraphic(null);
            } else {
                setGraphic(checkBox);
                if (ov instanceof BooleanProperty) {
                    checkBox.selectedProperty().unbindBidirectional((BooleanProperty) ov);
                }
                ov = getTableColumn().getCellObservableValue(getIndex());
                if (ov instanceof BooleanProperty) {
                    checkBox.selectedProperty().bindBidirectional((BooleanProperty) ov);
                }
            }
        }
    }
    //=============================WsTable=============================
}

